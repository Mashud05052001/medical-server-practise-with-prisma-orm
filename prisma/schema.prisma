generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  email String @unique
  password String
  role UserRole @default(PATIENT)
  needPasswordChange Boolean @default(false)
  status UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")

  // Relations
  Admin Admin?
  Doctor Doctor?
  Patient Patient?
}

model Admin {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // Relations
  User User @relation(fields: [email], references: [email])


  @@map("admins")
}

model Doctor {
  id                    String @id @default(uuid())
  name                  String
  email                 String @unique
  profilePhoto          String?
  contactNumber         String
  address               String?
  registrationNumber    String
  experience            Int @default(0)
  gender                Gender
  appointmentFee        Int 
  qualification         String 
  currentWorkingPlace   String
  designation           String 
  isDeleted             Boolean @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt


  // Relations
  User User @relation(fields: [email], references: [email])
  DoctorSpecialist DoctorSpecialist[]
  DoctorSchedules DoctorSchedules[]


  @@map("doctors")
}

model Specialities {
  id String @id @default(uuid()) 
  title String
  icon String

  @@map("specialities")
  DoctorSpecialist DoctorSpecialist[]
}

model DoctorSpecialist {
  specialitiesId String
  doctorId String

  Specialities Specialities @relation(fields: [specialitiesId], references: [id])
  Doctors Doctor @relation(fields: [doctorId], references: [id])

  @@id([doctorId, specialitiesId])
  @@map("doctorSpecialists")
}

model Patient {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(references: [email], fields: [email])

  @@map("patients")
  PatientHealthCare PatientHealthCare?
  MedicalReport MedicalReport[]
}

model PatientHealthCare {
  id                   String @id @default(uuid())
  patientId            String @unique
  dateOfBirth          DateTime
  gender               Gender
  bloodGroup           BloodGroup
  hasAllergies         Boolean @default(false)
  hasDiabetes          Boolean @default(false)
  height               String
  weight               String 
  smokingStatus        Boolean @default(false)
  dietaryPreferences   String?
  pregnancyStatus      Boolean @default(false)
  mentalHealthHistory  String?
  immunizationStatus   String?
  hasPastSurgeries     Boolean @default(false)
  recentAnxiety        Boolean @default(false)
  recentDepression     Boolean @default(false)
  maritalStatus        MaritalStatus @default(UNMARRIED)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt


  // Relations
  PatientId Patient @relation(fields: [patientId], references: [id])

  @@map("patientHealthCare")
}

model MedicalReport {
  id String @id @default(uuid())
  patientId String
  reportName String
  reportLink String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  PatientId Patient @relation(fields: [patientId], references: [id])

}

model Schedule {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  DoctorSchedules DoctorSchedules?

  @@map("schedules")
}

model DoctorSchedules {
  doctorId String
  scheduleId String @unique
  isBooked Boolean

  @@unique([doctorId,scheduleId])
  DoctorId Doctor @relation(fields: [doctorId],references: [id])
  ScheduleId Schedule @relation(fields: [scheduleId],references: [id])
}




enum UserRole {
  SUPER_ADMIN  
  ADMIN
  DOCTOR
  PATIENT
}
enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}
enum Gender {
  MALE
  FEMALE
  OTHERS
}
enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}
enum MaritalStatus {
  MARRIED
  UNMARRIED
}